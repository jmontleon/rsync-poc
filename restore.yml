- hosts: localhost
  gather_facts: false
  vars:
    restore_resources: True
    rsync_deployment:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        labels:
          claim: "{{ item.metadata.name }}"
          service: rsync
        name: "{{ item.metadata.name }}"
        namespace: "{{ namespace }}"
      spec:
        selector:
          matchLabels:
            service: rsync
        template:
          metadata:
            labels:
              claim: "{{ item.metadata.name }}"
              service: rsync
          spec:
            containers:
            - name: rsync
              imagePullPolicy: Always
              command:
                - sleep
                - infinity
              image: "quay.io/konveyor/rsync-transfer:latest"
              volumeMounts:
              - mountPath: /mnt
                name: mnt
            volumes:
            - name: mnt
              persistentVolumeClaim:
                claimName: "{{ item.metadata.name }}"
  tasks:
  - name: Set namespace path
    set_fact:
      namespace_path: "{{ playbook_dir }}/{{ namespace }}/resources/namespace.yml"

  - name: Update project API
    replace:
      path: "{{ namespace_path }}"
      regexp: '^apiVersion: v1'
      replace: 'apiVersion: project.openshift.io/v1'

  - name: Create namespace
    k8s:
      definition: "{{ lookup('file', namespace_path) }}"

  - name: Find PVC definitions
    find:
      paths: "{{ playbook_dir }}/{{ namespace }}/resources/"
      patterns: 'PersistentVolumeClaim-*'
    register: find

  - name: Create PVCs
    k8s:
      definition: "{{ lookup('file', item.path) }}"
    with_items: "{{ find.files }}"
    loop_control:
      label: "{{ item.path }}"

  - name: Get pvcs in namespace
    k8s_info:
      api_version: v1
      kind: persistentvolumeclaims
      namespace: "{{ namespace }}"
    register: pvcs

  - name: Create rsync deployments
    k8s:
      state: present
      definition: "{{ rsync_deployment }}"
    with_items: "{{ pvcs.resources }}"
    loop_control:
      label: "{{ item.metadata.name }}"

  - name: Get rsync pods
    k8s_info:
      api_version: v1
      kind: Pod
      namespace: "{{ namespace }}"
      label_selectors:
      - service = rsync
    register: pods

  - name: rsync content to cluster
    shell: oc rsync --no-perms -n {{ namespace }} {{ playbook_dir }}/{{ namespace }}/data/{{ item.metadata.labels.claim }}/ {{ item.metadata.name }}:/mnt/
    with_items: "{{ pods.resources }}"
    register: command_result
    retries: 10
    delay: 10
    until: command_result is succeeded
    loop_control:
      label: "{{ item.metadata.name }}"

  - name: Delete rsync deployments
    k8s:
      state: absent
      definition: "{{ rsync_deployment }}"
    with_items: "{{ pvcs.resources }}"
    loop_control:
      label: "{{ item.metadata.name }}"

  - when: restore_resources
    block:
    - name: Find resource definitions
      find:
        paths: "{{ playbook_dir }}/{{ namespace }}/resources/"
        excludes: 'PersistentVolumeClaim-*,namespace.yml'
      register: resource_find

  - name: Create Resources
    k8s:
      definition: "{{ lookup('file', item.path) }}"
    with_items: "{{ resource_find.files }}"
    loop_control:
      label: "{{ item.path }}"
