- hosts: localhost
  gather_facts: false
  vars:
    backup_resources: true
    excluded_resources:
    - Alertmanager
    - Binding
    - Bundle
    - BundleBinding
    - BundleInstance
    - EgressNetworkPolicy
    - EndpointSlice
    - Event
    - ImageStreamImport
    - ImageStreamMapping
    - InstallPlan
    - LimitRange
    - LocalResourceAccessReview
    - LocalSubjectAccessReview
    - PackageManifest
    - PersistentVolumeClaim
    - Pod
    - PodMetrics
    - PodSecurityPolicyReview
    - PodSecurityPolicySelfSubjectReview
    - PodSecurityPolicySubjectReview
    - PodTemplate
    - Prometheus
    - PrometheusRule
    - ReplicaSet
    - ReplicationControllerDummy
    - SelfSubjectRulesReview
    - ServiceMonitor
    - SubjectRulesReview
    quiesce_apps: true
    unquiesce_apps: true
    rsync_deployment:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        labels:
          claim: "{{ item.metadata.name }}"
          service: rsync
        name: "{{ item.metadata.name }}"
        namespace: "{{ namespace }}"
      spec:
        selector:
          matchLabels:
            service: rsync
        template:
          metadata:
            labels:
              claim: "{{ item.metadata.name }}"
              service: rsync
          spec:
            containers:
            - name: rsync
              imagePullPolicy: Always
              command:
                - sleep
                - infinity
              image: "quay.io/konveyor/rsync-transfer:latest"
              volumeMounts:
              - mountPath: /mnt
                name: mnt
            volumes:
            - name: mnt
              persistentVolumeClaim:
                claimName: "{{ item.metadata.name }}"
  tasks:
  - name: Create namespace directory
    file:
      state: directory
      path: "{{ playbook_dir }}/{{ namespace }}"

  - name: Create resources directory
    file:
      state: directory
      path: "{{ playbook_dir }}/{{ namespace }}/resources"

  - when: backup_resources
    block:
    - name: Get APIs
      community.kubernetes.k8s_cluster_info:
      register: apis

    - name: Get resources
      k8s_info:
        api_version: "{{ item.value.api_version }}"
        kind: "{{ item.value.kind }}"
        namespace: "{{ namespace }}"
      register: resources
      loop: "{{ apis.apis | dict2items }}"
      loop_control:
        label: "{{ item.value.kind }}.{{ item.value.api_version }}"
      when:
      - item.value.namespaced
      - item.value.kind not in excluded_resources

    - name: Initialize resource lists
      set_fact:
        pruned_resources: []
        unpruned_resources: []

    - name: Collect unmodified resources
      set_fact:
        unpruned_resources: "{{ unpruned_resources + item.resources }}"
      with_flattened: "{{ resources.results }}"
      when:
      - item.resources is defined
      loop_control:
        label: "{{ item.item.key }}"

    - name: Clean resources
      set_fact:
        pruned_resources: "{{ pruned_resources + new_item }}"
      with_items: "{{ unpruned_resources }}"
      vars:
        cleanup:
          metadata: "{{ item.metadata|combine({'resourceVersion': omit, 'uid': omit}) }}"
        new_item:
        - "{{ item|combine(cleanup) }}"
      loop_control:
        label: "{{ item.metadata.name }} {{ item.kind }} {{ item.apiVersion }}"

    - name: Write resources out
      copy:
        dest: "{{ playbook_dir }}/{{ namespace }}/resources/{{ item.kind}}-{{ item.metadata.name }}.yml"
        content: "{{ item | to_yaml }}"
      with_items: "{{ pruned_resources }}"
      loop_control:
        label: "{{ item.metadata.name }}"
      when:
      - not(item.kind == 'RoleBinding' and item.metadata.name == 'system:deployers')
      - not(item.kind == 'RoleBinding' and item.metadata.name == 'system:image-builders')
      - not(item.kind == 'RoleBinding' and item.metadata.name == 'system:image-pullers')

  - name: Retrieve namespace
    k8s_info:
      api_version: v1
      kind: Project
      name: "{{ namespace }}"
    register: namespace_info

  - name: cleanup namespace
    set_fact:
      pruned_namespace: "{{ new_item }}"
    vars:
      cleanup:
        metadata: "{{ item.metadata|combine({'resourceVersion': omit, 'uid': omit}) }}"
      new_item: "{{ item|combine(cleanup) }}"
    with_items:
    - "{{ namespace_info.resources[0] }}"
    loop_control:
      label: "{{ item.metadata.name }}"

  - name: Write namespace out
    copy:
      dest: "{{ playbook_dir }}/{{ namespace }}/resources/namespace.yml"
      content: "{{ pruned_namespace | to_yaml }}"

  - name: Get pvcs in namespace
    k8s_info:
      api_version: v1
      kind: persistentvolumeclaims
      namespace: "{{ namespace }}"
    register: pvcs

  - name: Intialize unbound PVCs
    set_fact:
      unbound_pvcs: []

  - name: Clean up PVC definitions
    set_fact:
      unbound_pvcs: "{{ unbound_pvcs + new_item }}"
    vars:
      cleanup:
        metadata: "{{ item.metadata|combine({'annotations': omit,'resourceVersion': omit, 'uid': omit}) }}"
        spec: "{{ item.spec|combine({'volumeName': omit}) }}"
      new_item:
      - "{{ item|combine(cleanup) }}"
    with_items: "{{ pvcs.resources }}"
    loop_control:
      label: "{{ item.metadata.name }}"

  - name: Write pvcs out
    copy:
      dest: "{{ playbook_dir }}/{{ namespace }}/resources/{{ item.kind}}-{{ item.metadata.name }}.yml"
      content: "{{ item | to_yaml }}"
    with_items: "{{ unbound_pvcs }}"
    loop_control:
      label: "{{ item.metadata.name }}"

  - name: Get deployments in namespace
    k8s_info:
      api_version: apps/v1
      kind: deployments
      namespace: "{{ namespace }}"
    register: deployments

  - name: Scale down deployments in namespace
    community.kubernetes.k8s_scale:
      api_version: v1
      kind: Deployment
      namespace: "{{ namespace }}"
      name: "{{ item.metadata.name }}"
      replicas: 0
    with_items: "{{ deployments.resources }}"
    loop_control:
      label: "{{ item.metadata.name }}"
    when: quiesce_apps

  - name: Create rsync pods
    k8s:
      state: present
      definition: "{{ rsync_deployment }}"
    with_items: "{{ pvcs.resources }}"
    loop_control:
      label: "{{ item.metadata.name }}"

  - name: Ensure data directory exists
    file:
      state: directory
      path: "{{ playbook_dir }}/{{ namespace }}/data"

  - name: Ensure PVC directories exist
    file:
      state: directory
      path: "{{ playbook_dir }}/{{ namespace }}/data/{{ item.metadata.name }}"
    with_items: "{{ unbound_pvcs }}"
    loop_control:
      label: "{{ item.metadata.name }}"

  - name: Get rsync pods
    k8s_info:
      api_version: v1
      kind: Pod
      namespace: "{{ namespace }}"
      label_selectors:
      - service = rsync
    register: pods

  - name: rsync content from cluster
    shell: oc rsync -n {{ namespace }} {{ item.metadata.name }}:/mnt/ {{ playbook_dir }}/{{ namespace }}/data/{{ item.metadata.labels.claim }}/
    with_items: "{{ pods.resources }}"
    register: command_result
    retries: 10
    delay: 10
    until: command_result is succeeded
    loop_control:
      label: "{{ item.metadata.name }}"

  - name: Delete rsync deployments
    k8s:
      state: absent
      definition: "{{ rsync_deployment }}"
    with_items: "{{ unbound_pvcs }}"
    loop_control:
      label: "{{ item.metadata.name }}"

  - name: Unscale deployments in namespace
    community.kubernetes.k8s_scale:
      api_version: v1
      kind: Deployment
      namespace: "{{ namespace }}"
      name: "{{ item.metadata.name }}"
      replicas: "{{ item.spec.replicas }}"
      wait_timeout: 120
    with_items: "{{ deployments.resources }}"
    loop_control:
      label: "{{ item.metadata.name }}"
    when:
    - quiesce_apps
    - unquiesce_apps
